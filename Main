#include<stdio.h>
#include <windows.h>
#include<conio.h>
#include<time.h>

void gotoxy(int x, int y);//控制光標。X表示橫坐標，Y表示縱坐標
void console();//設置控制台窗口大小，為了讓程序運行得更好看
void my_print();//設置介面

void my_up();//旋轉
void my_down();//下移
void my_lift();//左移
void my_right();//右移
void my_stop();//遊戲暫停

void my_randout();//隨機出現方塊，並列印在提示區
void my_printblock();//列印 4*4 的方格來顯示方塊

void clear();//消除整行
void gameover();//遊戲結束


int tem[4][4];//用4*4的方格來控制方塊的操作和顯示 這個作為傳值媒介
int block[4][4];//提示區的方塊
int BLOCK[4][4];//正在下落的方塊
int scope[32][34] = { 0 };//操作的範圍 這裡要注意，一個方4格是占兩個橫坐標單位的
int point_x, point_y;//方格的左上角坐標
int fen = 0;//得分
bool check = true;//檢查方塊還能不能下落
int block0[4][4] = { { 0,1,1,0 },{ 0,0,1,0 },{ 0,0,1,0 },{ 0,0,0,0 } };// 7 個方塊 用數組表示 正「7」
int block1[4][4] = { { 0,1,1,0 },{ 0,1,0,0 },{ 0,1,0,0 },{ 0,0,0,0 } };// 反「7」
int block2[4][4] = { { 0,0,0,0 },{ 0,0,1,1 },{ 0,1,1,0 },{ 0,0,0,0 } };// 反「z」
int block3[4][4] = { { 0,0,0,0 },{ 1,1,0,0 },{ 0,1,1,0 },{ 0,0,0,0 } };// 正「z」
int block4[4][4] = { { 0,0,0,0 },{ 0,1,0,0 },{ 1,1,1,0 },{ 0,0,0,0 } };// 倒「T」
int block5[4][4] = { { 0,0,0,0 },{ 0,1,1,0 },{ 0,1,1,0 },{ 0,0,0,0 } };// 正方形
int block6[4][4] = { { 0,0,0,0 },{ 0,0,0,0 },{ 1,1,1,1 },{ 0,0,0,0 } };// 直條

void main()
{
	srand(time(NULL));//設置隨機數種子
	
	char key;
	int i, j;
	int time = 0;//控制下落時間

	console();

	my_print();

	my_randout();

	while (true)//死循環
	{

		if (check)//如果沒有正在下落的方塊就執行if裡面的
		{
			check = false;
			point_x = 14;//方塊最初出現的地方
			point_y = 0;

			for (i = 0; i < 4; i++)
			{
				for (j = 0; j < 4; j++)
				{
					BLOCK[i][j] = block[i][j];//將提示區的方塊數組傳到下落的方塊數組
				}
			}
			my_printblock();//在point_x,point_y顯示方塊。
			my_randout();//提示區隨機換一個方塊
		}

		if (_kbhit()) //檢測，如果有按鍵就執行if裡面的
		{
			key = _getch();//捕獲按鍵

			switch (key)
			{
			case 72:my_up();//上

				break;

			case 75:my_lift();//左

				break;

			case 77:my_right();//右

				break;

			case 80:my_down();//下

				break;
				
			case 32:my_stop();//空格 暫停或開始

				break;

			case 27:exit(0);//Esc 退出

			default:;
			}
		}

		Sleep(30);//等待0.03秒 0.03秒才能執行一個按鍵 也降低CPU

		if (0 == ++time % 30)//控制下落的時間=30*30毫秒
		{
			my_down();//時間到自動下落一格
		}

		if (true == check)//當不能下落時
		{
			for (i = 0; i < 4; i++)
			{
				for (j = 0; j < 4; j++)
				{
					if (1 == BLOCK[i][j])

						scope[point_x / 2 + j][point_y + i] = BLOCK[i][j];//把下落的方塊賦值給操作區的數組
						//這裡的point_x除以2是因為一個小格子占兩個橫坐標
				}
			}
			my_printblock();
			clear();//如果有某一行滿了就消除
		}
	}
}
